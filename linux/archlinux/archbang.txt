Site oficial: http://archbang.org/
https://www.youtube.com/watch?v=rxN9jNXiy-c

***** Download archbang

wget https://sourceforge.net/projects/archbang/files/ArchBang/archbang-summer-2606-x86_64.iso

***** Gravando a iso no pendrive

sudo dd if=archbang-summer-2606-x86_64.iso of=/dev/sdb bs=4MB


=====================================================================================
----- Instalação do archbang
http://archbang.org/guide/
=====================================================================================

***** Dar boot pela USB e executar a instalação
/dev/sda1 - 192GB - linux - / 
/dev/sda2 -  32GB - linux swap - restante do disco

-- dar boot 

***** Configurar locale.gen
-- Alterar o arquivo /etc/locale.gen
Descomentar as linhas abaixo e conferir se as demais estão comentadas.
pt_BR.UTF-8 UTF-8
en_US.UTF-8 UTF-8

-- Executar:
sudo locale-gen

***** Proxy (primeira parte)
-- Veja arquivo configurar_proxy.txt

***** configurar keys
-- Atualizar o banco de dados local do pacman
sudo pacman -Syy

-- configurar keys (só para corrigir erro de chave)
sudo pacman-key --init
sudo pacman-key --populate archlinux
sudo pacman -S archlinux-keyring

sudo pacman -Syy

***** Atualizar o arquivo /etc/pacman.conf
sudo vi /etc/pacman.conf

-- descomente as linhas abaixo
#[multilib]
#Include = /etc/pacman.d/mirrorlist

-- escrever:
[archlinuxfr]
SigLevel = Never
Server = http://repo.archlinux.fr/x86_64

-- Atualizar o banco de dados local do pacman
sudo pacman -Syy

***** Atualizar o arquivo /etc/pacman.d/mirrorlist
sudo vi /etc/pacman.d/mirrorlist

-- Instalar pacman-contrib
sudo pacman -S pacman-contrib

-- Otimizar pacman selecionando repositórios mais rápidos
cd ~
sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.bck
sudo cp /etc/pacman.d/mirrorlist.pacnew /etc/pacman.d/mirrorlist

Obs: Descomentar todas as linhas com "#Server =" no arquivo /etc/pacman.d/mirrorlist
     :%s/#Server =/Server =/g

cp /etc/pacman.d/mirrorlist mirrorlist.temp
rankmirrors -v -n 40 mirrorlist.temp > mirrorlist
sudo cp mirrorlist /etc/pacman.d/mirrorlist
sudo pacman -Syy

-- Se o comando acima der o error “erro: não foi possível abrir o arquivo /var/lib/pacman/sync/core.db: Unrecognized archive format”, executar:
sudo rm /var/lib/pacman/db.lck
sudo rm -R /var/lib/pacman/sync/
sudo rm -r /etc/pacman.d/gnupg
sudo pacman -Sc
– executar “configurar keys”

***** Configurar o autocomplete com sudo
-- Colocar a linha abaixo no arquivo .bashrc
complete -cf sudo

***** Instalar yay
sudo pacman -S git go base-devel cmake
cd ~
git clone https://aur.archlinux.org/yay.git
cd yay
makepkg -si
cd ..
rm -rf yay/
yay -Syyu

***** Proxy (segunda parte)
-- Veja arquivo configurar_proxy.txt
reboot

***** Colocar a linha abaixo no arquivo .bashrc
export PATH=$PATH:$HOME/bin

***** Instalar screenfetch
sudo pacman -S screenfetch

—- Colocar a linha abaixo no arquivo .bashrc
screenfetch

***** Instalar medit
yay -S medit 

-- Configurar o esquema de cores para oblivion

***** Criar partição criptografada
-- Veja arquivo criptografar_particao.txt

***** Conferir arquivo /etc/shells
-- Verificar o valor na variável de ambiente SHELL está no arquivo /etc/shells 
env | grep SHELL

-- Incluir o valor de SHELL no arquivo /etc/shells 

***** Utilitários de rede
sudo pacman -S gvfs gvfs-smb sshfs smbclient cifs-utils exfat-utils

***** Comandos comuns smbclient
https://debian-handbook.info/browse/pt-BR/stable/sect.windows-file-server-with-samba.html

-- Lista compartilhamentos públicos
smbclient -L //servidor

-- conecta ao compartilhamento de um servidor.
smbclient //servidor/share

-- montar um compartilhamento
sudo mount.cifs //servidor/share /mnt/share -o user=wilton,rw,vers=1.0

***** Setar o som
sudo pacman -S alsa-utils alsa-oss
alsamixer
- verificar se é necessário alterar o sound card para "HDA Intel PCH"

-- se não passar nos testes do som (verificar se necessário)
sudo pacman -S pulseaudio pulseaudio-alsa pulseaudio-bluetooth 
pulseaudio --start

—- Instalar moc
sudo pacman -S cmus moc alsa-lib libao libpulse faad2 ffmpeg flac jack libmad libmodplug libmp4v2 speex
sudo pacman -S taglib libmpcdec libsamplerate libvorbis libcdio-paranoia opusfile wavpack ffmpeg4.4

-- testar o som
aplay /usr/share/sounds/alsa/Noise.wav
cat /proc/asound/card*/codec* |grep Codec

-- Gravar configuração do som
sudo alsactl store

***** Configurar bluetooth
sudo pacman -S bluez bluez-utils 
sudo systemctl enable bluetooth
sudo systemctl start bluetooth

rfkill 
ID TYPE      DEVICE                SOFT         HARD
 0 wlan      acer-wireless desbloqueado desbloqueado
 1 wlan      phy0          desbloqueado desbloqueado
 2 bluetooth hci0          desbloqueado desbloqueado

Obs: verificar se bluetooth está bloqueado. Se estiver executar: rfkill unblock 2

bluetoothctl
[bluetooth]# power on
[bluetooth]# agent on
[bluetooth]# default-agent
[bluetooth]# devices
[bluetooth]# scan on
[NEW] Device 00:1D:43:6D:03:26 Lasmex LBT10
[bluetooth]# pair 00:1D:43:6D:03:26
[bluetooth]# connect 00:1D:43:6D:03:26
[bluetooth]# trust 00:1D:43:6D:03:26
[bluetooth]# scan off

Se der o erro org.bluez.Error.Failed 

pulseaudio -k
[bluetooth]# connect 00:1D:43:6D:03:26
…
[bluetooth]# scan off
[bluetooth]# exit

***** Configurar o uso da memória de swap
-- verificar o valor atual
cat /proc/sys/vm/swappiness

-- se o valor for muito alto alterar para um valor menor
-- inserir a linha abaixo no arquivo /etc/sysctl.d/99-sysctl.conf
vm.swappiness=5

-- executar o comando abaixo:
sudo sysctl --system

***** Implementação do OpenGL - graficos 3D
sudo pacman -S mesa

***** Fontes
sudo pacman -S ttf-dejavu ttf-freefont ttf-liberation ttf-bitstream-vera
yay -S  ttf-ms-fonts

-- Novas fontes colocar em ~/.fonts depois executar:
fc-cache
fc-list | grep fonte

***** Instalar aplicativos de configuração
***** obconf - openbox
***** lxappearance - aparencia do openbox
***** lxinput - teclado e mouse
sudo pacman -S xorg-xrandr obconf lxinput

***** Instalar slim
sudo pacman -S slim slim-themes archlinux-themes-slim
sudo medit /etc/slim.conf

-- Fazer as alterações abaixo:
------------------------
# Commands for halt, login, etc.
# halt_cmd        	/sbin/shutdown -h now
# reboot_cmd      	/sbin/shutdown -r now
halt_cmd        	halt
reboot_cmd         reboot

# welcome message. Available variables: %host, %domain
welcome_msg         Welcome to %host

# Session message. Prepended to the session name when pressing F1
# session_msg         Session:

# shutdown / reboot messages
shutdown_msg       The system is halting...
reboot_msg         The system is rebooting...

# default user, leave blank or remove this line
# for avoid pre-loading the username.
# default_user    	simone
default_user wilton

# Focus the password field on start when default_user is set
# Set to "yes" to enable this feature
focus_password      yes

# Automatically login the default user (without entering
# the password. Set to "yes" to enable this feature
#auto_login      	no
auto_login      	no

# current theme, use comma separated list to specify a set to
# randomly choose from
current_theme   	default
current_theme archlinux-simplyblack

# Lock file
lockfile            /var/lock/slim.lock

# Log file
logfile             /var/log/slim.log
------------------------

sudo systemctl enable slim.service

-- Verificar no arquivo .bash_profile a necessidade de retirar (comentar) 
   a linha que inicia o X (startx)
Por exempo: [[ -z $DISPLAY && $XDG_VTNR -eq 1 ]] && exec startx

-- Desabilitar login automático
sudo systemctl edit getty@tty1
[Service]
ExecStart=
ExecStart=-/sbin/agetty --skip-login --noclear %I 38400 linux

***** Configurar mais de um monitor
***** lxrandr - monitor
sudo pacman -S lxrandr
-- Verificar os monitores existentes
xrandr -q

-- Colocar as linhas abaixo no arquivo "~/.config/openbox/autostart". Alterando conforme os monitores listados acima.
# Monitores
# Executar "xrandr -q" para saber o nome dos monitores
# (sleep 1s && xrandr --output VGA-1 --auto --output HDMI-1 --auto --right-of VGA-1)
# (sleep 1s && xrandr --output eDP1 --auto --output DP1 --auto --right-of eDP1)
(sleep 1s && xrandr --output eDP1 --auto --output HDMI1 --auto --left-of eDP1)

***** Inicialização do firewall no boot
sudo pacman -S ufw gufw
sudo ufw enable
sudo systemctl enable ufw
sudo systemctl start ufw
sudo ufw status

***** Configurando openssh
-- Alterar o arquivo /etc/ssh/sshd_config. Colocar as linhas abaixo e comentar todas as configurações já existentes.
ListenAddress 0.0.0.0
Protocol 2
LoginGraceTime 120
PermitRootLogin no
AuthorizedKeysFile	.ssh/authorized_keys
ChallengeResponseAuthentication no
UsePAM yes
PrintMotd no
Subsystem	sftp	/usr/lib/ssh/sftp-server
AllowUsers wiltonj

-- Configurar o firewall para aceitar a porta 22

-- Restaurar backup do arquivo .ssh
tar xfz /mnt/disco/bck/saturno/ultimo/home/_ssh.tar.gz

-- Inicar o daemon sshd
sudo systemctl start sshd

-- Conectar ao servidor
ssh usuario@endereço.ip.do.destino

-- Copiando arquivos e diretórios para outra máquina via ssh
scp -r ./ usuario@endereco.ip.do.destino:./diretorio.destino/
scp -r ./Documents/* usuario@endereco.ip.do.destino:/home/usuario/Documentos

-- Reiniciar o sistema
reboot

***** Diversos
***** rmlint - verifica arquivos duplicados e vazios. 
                       Diretórios vazios e symlinks quebrados
***** ncdu - localiza arquivos e diretórios grandes
***** feh - visualizar imagens e papel de parede
***** imagemagick - tratamento de imagens (convert, junta, etc) 
              https://terminalroot.com.br/2015/03/tratamento-de-imagens-com-imagemagick.html
***** tint2 - barra de tarefas
***** scrot - print screen
***** slock - bloqueia a tela
***** xautolock - auto bloqueio da tela
***** archlinux-xdg-menu - gerar menu para o openbox
sudo pacman -S putty rmlint colordiff usbutils
sudo pacman -S testdisk scrot tree xorg-xcalc xautolock youtube-dl
sudo pacman -S imagemagick audacious
sudo pacman -S firefox firefox-i18n-pt-br
sudo pacman -S xarchiver file-roller filezilla vlc transmission-gtk
sudo pacman -S lxhotkey gucharmap gpicview simple-scan guvcview evince mtpaint xfburn
sudo pacman -S p7zip tar gzip bzip2 unrar unzip
sudo pacman -S xautolock
sudo pacman -S chromium
yay -S google-chrome
sudo pacman -S libreoffice-fresh-pt-br gimp epdfview evince calibre geogebra
sudo pacman -S ghex hexedit meld sqlite sqlite-doc curl
yay -S postman-bin

***** Colocar as linha abaixo no arquivo .bashrc
export BROWSER=google-chrome-stable

***** Configurar o xterm
-- Copiar o arquivo ~/ti/linux/archlinux/_config/_Xresources para home
cp ~/ti/linux/archlinux/_config/_Xresources ~/.Xresources

-- Executar
xrdb -merge ~/.Xresources

-- Alterar o arquivo ~/.xinitrc. Incluir a linha abaixo:
[[ -f ~/.Xresources ]] && xrdb -merge -I$HOME ~/.Xresources

***** Configurar o lxterminal
-- Alterar o arquivo .config/lxterminal/lxterminal.conf
geometry_columns=186
geometry_rows=46
geometry_x=10
geometry_y=10

***** configuração o picom (compton)
sudo pacman -S picom

-- Copiar arquivo de configuração para ~/.config/picom/picom.conf
cp /etc/xdg/picom.conf ~/.config/picom.conf

-- Alterar os parâmetros abaixo e retirar o chromium do parâmetro shadow-exclude.
shadow = true;
shadow-radius = 12;
shadow-offset-x = -15;
shadow-offset-y = -15;
shadow-opacity = 0.75;
frame-opacity = 1.0;

wintypes:
{
  ...
  popup_menu = { opacity = 0.9; }
  dropdown_menu = { opacity = 0.95; }
  ...
};

***** Configuração do scrot
scrot opcoes [nomeArquivo]

# Permite a seleção da janela ou área a ser capturada.
scrot -s

# Captura a janela com foco
sleep 5s && scrot -ucd 3

# Captura uma parte da tela
sleep 5s && scrot -scd 3

# -b            = inclui a borda da janela
# -d            = intervalo de tempo antes da captura
# -c            = conta o tempo conforme definido em -d
# -u            = captura a janela que tem o foco
# -e comando    = executa o comando após a captura
# -t percentual = percentual do tamanho da imagem
# -q percentual = relação qualidade e opção de compressão do arquivo

***** Editar arquivo .xinitrc ou .config/openbox/autostart e incluir as linhas abaixo:
------------------------
# Monitores
# Executar "xrandr -q" para saber o nome dos monitores
# (sleep 1s && xrandr --output VGA-1 --auto --output HDMI-1 --auto --right-of VGA-1)
# (sleep 1s && xrandr --output eDP1 --auto --output DP1 --auto --right-of eDP1)
# (sleep 1s && xrandr --output eDP1 --auto --output HDMI1 --auto --left-of eDP1)
# (sleep 1s && xrandr --output eDP1 --auto --output HDMI1 --auto --right-of eDP1)

#Set wallpaper
# feh --bg-fill ~/Backgrounds/estate.jpg &
(sleep 2 && feh --bg-scale /home/wilton/Imagens/papelParede/archLinux/SIoLm5X-arch-linux-wallpaper.png) &

# Effects
(sleep 2 && picom -b -c) &

# Onscreen system stats
# (sleep 2 && conky) &

# Enable as required
#xbacklight -set 100 &
#/usr/bin/synclient TouchpadOff=1 &

# Xorg keyboard map change for your own country/keyboard layout
# setxkbmap br &
# setxkbmap -model abnt2 -layout br -variant abnt2 &

# if [ "$WINDOW_MANAGER" == "openbox" ]; then
    # Onscreen system stats
#   conky &
    # Panel
#   tint2 &
# fi

# Network Manager Applet
(sleep 2 && nm-applet) &

# Volume
(sleep 2 && volumeicon) &

# autolock
(sleep 2 && xautolock -time 5 -locker slock) &

# Dunst onscreen messages
(sleep 2 && dunst) &

# Panel
(sleep 2 && tint2) &

# configuracao do xterm
# (sleep 2 && [[ -f ~/.Xresources ]] && xrdb -merge -I$HOME ~/.Xresources) &

# montar particao compactada
# (sleep 1s && xterm -fg white -bg black -geometry 52x5 -e mount.sh --hd) &
------------------------

***** Configurando openssh
sudo pacman -S openssh 

-- Alterar o arquivo /etc/ssh/sshd_config. 
   Colocar as linhas abaixo e comentar todas as configurações já existentes.

ListenAddress 0.0.0.0
Protocol 2
LoginGraceTime 120
PermitRootLogin no
AuthorizedKeysFile	.ssh/authorized_keys
ChallengeResponseAuthentication no
UsePAM yes
PrintMotd no
Subsystem	sftp	/usr/lib/ssh/sftp-server
AllowUsers wilton

-- Restaurar backup do diretório .ssh 

-- Configurar o firewall para aceitar a porta 22

-- Inicar o daemon sshd
sudo systemctl start sshd

-- Conectar ao servidor
ssh usuario@endereço.ip.do.destino

-- copiando arquivos e diretórios para outra máquina via ssh
scp -r ./ usuario@endereco.ip.do.destino:./diretorio.destino/
scp -r ./Documents/* usuario@endereco.ip.do.destino:/home/usuario/Documentos

-- configurando aplicação padrão
xdg-mime default medit.desktop text/plain

***** Configurar git
-- Gerar um par de chave ssh
ssh-keygen

-- Cadastrar a chave pública no servidor Git (Github ou trabalho)
-- Copiar o conteúdo do arquivo ~/.ssh/id_rsa.pub para o local apropriado

-- Gerar arquivo de configuração ~/.gitconfig
git config --global user.email SEU_EMAIL@dominio.com.br
git config --global user.name SEU_LOGIN
git config --global merge.tool vimdiff
git config --global pull.rebase false
Se for necessário configurar proxy
git config --global http.proxy $http_proxy
git config --global https.proxy $https_proxy

-- Restaurar backup do arquivo .gitconfig
cp /mnt/disco/bck/penguin/ultimo/home/_gitconfig .gitconfig

***** Restaurar backup do diretório ~/devtools
tar xzf /mnt/disco/bck/penguin/ultimo/home/devtools.tar.gz

***** Instalação NVM
-- Site nvm https://github.com/creationix/nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
yay -S watchman

-- Alterar permissão de execução para o arquivo "~/.config/nvm/nvm.sh"
cd ~/.config/nvm
chmod u+x nvm.sh

-- Fechar o terminal e abrir outro.

—- Comando importantes do nvm
nvm --version
nvm ls-remote
nvm install 9.9.9
nvm install 8.2.1 --reinstall-packages-from=7.11.1
nvm install --lts=argon
nvm uninstall 9.9.9
nvm ls
nvm alias default 10.21.0
nvm use 9.9.9
nvm which 9.9.9

***** Instalação Nodejs
-- Instalar pacotes
nvm ls-remote --lts | grep Latest

nvm install --lts=fermium --default
npm cache clear --force
npm install -g nodemon node-gyp node-pre-gyp gulp vtop npm-check-updates
npm install -g typescript@3.9.6 @nestjs/cli@8.0.2 @angular/cli
npm install -g eslint jslint
npm install -g bash-language-server dts-gen

nvm install --lts=gallium
nvm install --lts=gallium --reinstall-packages-from='lts/fermium'
npm cache clear --force
npm install --location=global nodemon node-gyp node-pre-gyp gulp npm-check-updates
npm install --location=global typescript @nestjs/cli @angular/cli
npm install --location=global eslint jslint
npm install --location=global bash-language-server dts-gen

—- Configurar npm
npm config set temp /tmp
npm config set strict-ssl false
npm config set registry "http://registry.npmjs.org/"

Obs: Verificar se é necessário
npm config set proxy "http://127.0.0.1:3128"
npm config set https-proxy "http://127.0.0.1:3128"
npm config set prefix "/usr/lib/node_modules/"

-- Restaurar backup do arquivo .npmrc
cp /mnt/disco/bck/penguin/ultimo/home/_npmrc .npmrc

—- Comandos importantes do npm (Obs: mas versões acima da gallium (16.15.0) usar
    --location=global no lugar de -g
npm list
npm list --location=global --depth=0
npm update --location=global
npm list --location=global
npm update --location=global
npm cache verify
npm cache clean --force
npm update packageName
npm uninstall packageName
npm show packageName@* version

sudo npm update --location=global packageName
sudo npm uninstall --location=global packageName

***** Instalar Golang
https://www.freecodecamp.org/news/how-to-install-go-in-arch-linux-using-pacman/
https://wiki.archlinux.org/title/Go#Installation
sudo pacman -S go go-tools

—- Se for necessário, alterar a variável de ambiente GOPATH
go env -w GOPATH="/home/wilton/go"

—- Colocar as linhas abaixo no arquivo .bashrc
export GOLANG_HOME=/usr/lib/go
export PATH=$PATH:$GOLANG_HOME/bin:$HOME/go/bin

—- Instalar ou atualizar gopls (Antes verificar se já está instalado)
go install golang.org/x/tools/gopls@latest

—- Intalar ferramentas do golang
go install golang.org/x/lint/golint@latest
go install golang.org/x/tools/cmd/gotype@latest
go install github.com/sqs/goreturns@latest
go install github.com/kisielk/errcheck@latest

***** Instalar java
sudo pacman -S jdk8-openjdk openjdk8-doc openjdk8-src
sudo pacman -S jdk11-openjdk openjdk11-doc openjdk11-src
sudo pacman -S jdk-openjdk openjdk-doc openjdk-src

-- Comando para saber as VM's java instaladas
archlinux-java status

-- Comando para mudar a VM's java default
sudo archlinux-java set java-8-openjdk

-- Comando para desfazer a VM's java dafault
sudo archlinux-java unset

-- Diretório do java /usr/lib/jvm

—- Colocar as linhas abaixo no arquivo .bashrc
export JAVA_HOME=/usr/lib/jvm/default
export JRE_HOME=/usr/lib/jvm/default
# export JAVA_OPTS='-XX:+IgnoreUnrecognizedVMOptions --add-modules java.se.ee'
export PATH=$PATH:$JAVA_HOME/bin

export MAVEN_OPTS=-Xmx512m
export M2_HOME=$HOME/devtools/maven
export PATH=$PATH:$M2_HOME/bin

***** Instalar Python
sudo pacman -S python-pip

-- Restaurar o backup do arquivo .pylintrc
cp /mnt/disco/bck/penguin/ultimo/home/_pylintrc .pylintrc

-- Instalar o pylint
sudo pip install pylint

-- Instalar utils
sudo pip install pyflakes flake8 pycodestyle jedi-language-server

—- Para saber se um pacote está instalado. O parâmetro --format pode ser configurado em pip.conf
pip3 list --format=(legacy|columns)

-- Restaurar o backup do arquivo .pip
tar xzf /mnt/disco/bck/penguin/ultimo/home/_pip.tar.gz

—- Criar o arquivo $HOME/.pip/pip.conf
[list]
format=columns

—- Remover pacote
sudo pip3 uninstall pacote

***** Instalar vim
sudo pacman -S vim ctags clang

—- Instalar pacote para coc-sh
npm install --location=global bash-language-server

—- Instalar fontes extras para o vim
https://wiki.debian.org/pt_BR/Fonts#Adicionando_fontes

—- Acessar o site NerdFonts
https://www.nerdfonts.com/
https://github.com/ryanoasis/nerd-fonts#font-installation

—- Fazer download das fontes
“Droid Sans Mono Nerd Font”
“DejaVu Sans Mono Nerd Font Complete”
“Roboto Mono”
Arquivos .ttf e .otf
—- Copiar os arquivos de font para o diretório .local/share/fonts
mkdir -p .local/share/fonts
—- Executar os comandos
fc-cache
fc-cache -fv
—- Outros comando
fc-list
fc-list :spacing=mono
fc-match -s Helvetica

***** Configurar vim
-- Criar o diretório ~/vim-backup

—- Instalar vim-plug
curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

-- Restaurar backup do arquivo .viminfo
cp /mnt/disco/bck/penguin/ultimo/home/_viminfo .viminfo

-- Restaurar backup do arquivo .vimrc
cp /mnt/disco/bck/penguin/ultimo/home/_vimrc .vimrc

-- Restaurar backup do diretório .vim
tar xzf /mnt/disco/bck/penguin/ultimo/home/_vim.tar.gz

—- Editar arquivo ~/.vim/coc-settings.json
nano ~/.vim/coc-settings.json
Alterar diretório do node

—- Colocar a linha abaixo no arquivo .bashrc
export EDITOR=vim

-- editar o .vimrc e executar o comando abaixo
vim .vimrc
:PlugUpdate
:CocUpdate

-- Configurar para o root
su
cd /root
mkdir vim-backup
cp /home/wilton/.vimrc .
cp /home/wilton/.viminfo .
cp -R /home/wilton/.vim/ .vim/
cp -R /home/wilton/.config/coc/ .config/coc
-- editar o .vimrc e executar o comando abaixo
vim .vimrc
:PlugUpdate
:CocUpdate
exit

***** Instalar Android SDK
https://developer.android.com/studio/#downloads (Command line tools only)
—- Instalar libs 32bits
sudo pacman -S lib32-ncurses lib32-glibc lib32-gcc-libs lib32-readline lib32-zlib lib32-fontconfig
yay -S lib32-libstdc++5

—- Executar o comando abaixo e verificar se tem a linha "en_US.utf8"
locale -a

—- Se a linha não existe, descomentar a linha que tem en_US.utf8 no arquivo /etc/locale.gen e executar:
sudo locale-gen

—- Unzip o arquivo commandlinetools-linux-*_latest.zip no diretório devtools
cd ~/devtools
mkdir android-sdk
unzip commandlinetools-linux-*_latest.zip
mv cmdline-tools/ android-sdk

—- incluir as linhas abaixo no arquivo .bashrc
export CHROME_EXECUTABLE=/usr/bin/google-chrome-stable
export ANDROID_HOME=$HOME/devtools/android-sdk
export ANDROID_KEYSTORE=$HOME/gdrive/ti/certificados/android/release.keystore
export ANDROID_KEY_ALIAS=wjps-release
export REPO_OS_OVERRIDE=linux
export PATH=$PATH:$ANDROID_HOME/bin:$ANDROID_HOME/tools/bin:$ANDROID_HOME/platform-tools

-- Restaurar o backup do arquivo .pip
tar xzf /mnt/disco/bck/penguin/ultimo/home/_android.tar.gz
ou
—- Criar arquivo ~/.android/repositories.cfg e incluir as linhas abaixo:
### User Sources for Android SDK Manager
#Wed Mar 14 22:55:42 ICT 2018
count=0

—- Executar sdkmanager
sdkmanager --sdk_root=$ANDROID_HOME --list
sdkmanager --sdk_root=$ANDROID_HOME --update
sdkmanager --sdk_root=$ANDROID_HOME --licenses

—- Criar o arquivo package.txt e incluir as linhas abaixo
tools
platform-tools
platforms;android-32
build-tools;32.0.0
cmdline-tools;latest
extras;google;google_play_services
extras;google;webdriver
sources;android-31
add-ons;addon-google_apis-google-24
system-images;android-25;default;x86
system-images;android-25;default;x86_64
system-images;android-31;default;arm64-v8a
system-images;android-31;default;x86_64
system-images;android-32;google_apis;arm64-v8a
system-images;android-32;google_apis;x86_64
system-images;android-32;google_apis_playstore;arm64-v8a
system-images;android-32;google_apis_playstore;x86_64

—- Instalar os pacotes
sdkmanager --sdk_root=$ANDROID_HOME --package_file=package.txt
sdkmanager --sdk_root=$ANDROID_HOME --update

-- Configurar acesso a um device android pela USB
-- Configurar para usar o dispositivo. Executar o comando lsusb para descobrir o vender Id e product id do dispositivo.
lsusb

Bus 001 Device 007: ID 22b8:2e82 Motorola PCS motorola one
Bus 002 Device 008: ID 04e8:6860 Samsung Electronics Co., Ltd Galaxy A5 (MTP)

-- Criar o arquivo /etc/udev/rules.d/51-android.rules e inserir as linhas abaixo:
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",MODE="0666",OWNER="wilton"
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",ATTR{idProduct}=="2e82",SYMLINK+="android_adb"
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",ATTR{idProduct}=="2e82",SYMLINK+="android_fastboot"
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",ATTR{idProduct}=="2e82",SYMLINK+="libmtp",MODE="0666",ENV{ID_MTP_DEVICE}="1"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",MODE="6860",OWNER="wilton"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",ATTR{idProduct}=="6860",SYMLINK+="android_adb"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",ATTR{idProduct}=="6860",SYMLINK+="android_fastboot"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",ATTR{idProduct}=="6860",SYMLINK+="libmtp",MODE="0666",ENV{ID_MTP_DEVICE}="1"

-- Recarregar as regras udev
sudo udevadm control --reload-rules

-- Instalar Media Transfer Protocol
sudo pacman -S mtpfs gvfs-mtp

-- Descomentar a linha que tem "user_allow_other" no arquivo "/etc/fuse.conf"

***** Instalar Flutter
https://www.rockyourcode.com/how-to-get-flutter-and-android-working-on-arch-linux/

yay -S flutter

-- Permissão
sudo gpasswd -a $USER flutterusers
sudo chown -R :flutterusers /opt/flutter
sudo chmod -R g+w /opt/flutter/
Opcional
sudo chown -R $USER:flutterusers /opt/flutter

-- Instalação manual
https://flutter.dev/docs/get-started/install/chromeos
https://flutter.dev/docs/get-started/install/linux
cd ~/devtools
tar xf flutter_linux_3.0.1-stable.tar.xz (versão estável)

—- Colocar as linhas abaixo no arquivo .bashrc
export FLUTTER_HOME=$HOME/devtools/flutter
export PATH=$PATH:$FLUTTER_HOME/bin

-- Instalar os pacotes
sudo pacman -S glu ninja

-- Instalar dependências
flutter precache --android --ios --web --linux
flutter doctor
flutter doctor --android-licenses

-- Testar a instalação
flutter create teste
cd teste
flutter run

- Criar projeto web
flutter channel beta (temporário)
flutter upgrade
flutter config --enable-web
flutter create projeto
cd projeto
flutter update-packages (temporário)
flutter run -d chrome
flutter build web

—- Adiciona suporte a web para um projeto existente
flutter create .

—- Comandos úteis do Flutter para ter sempre à mão:
flutter config → Lista configurações
flutter config --no-analytics
flutter create → cria um novo projeto com toda a estrutura padrão de pastas, código boilerplate e testes.
flutter run → compila e dá build em um determinado projeto.
flutter run -d <id do dispositivo>→ compila e dá build em um determinado projeto tendo como alvo um dispositivo específico.
flutter install → instala um projeto Flutter no dispositivo conectado.
flutter packages get → adiciona dependências ao projeto.
flutter test → executa teste unitário.
flutter doctor → mostra informações sobre o processo de instalação do Flutter.
flutter devices → lista todos os dispositivos conectados, com informações como: nome do dispositivo, id do dispositivo e versão do Android .
s → realiza uma captura de tela do aplicativo em execução e a armazena na pasta do projeto.
r → realiza hot reload do projeto.
R → realiza hot restart do projeto.
q → encerra o projeto.
flutter help →lista estes e todos os outros comandos disponíveis para serem executados com Flutter.

***** Instalar VsCode
—- Fazer download do site da Microsoft (https://code.visualstudio.com/Download) ou instalar do repositório AUR
yay visual-studio-code-bin

—- Se fizer download e descompactar no diretório /home/wiltonj/devtools
tar xzf ../Downloads/code-stable-x64-1652813090.tar.gz

—- Recuperar os arquivos abaixo do backup
cd ~
tar xzf /mnt/disco/bck/penguin/ultimo/home/_vscode.tar.gz
cd /tmp
tar xzf /mnt/disco/bck/penguin/ultimo/home/_config.tar.gz
cd .config
mv Code ~/.config

—- Para aumentar o limite de arquivos sendo monitorados:
# ver o número atual
cat /proc/sys/fs/inotify/max_user_watches

# Inserir a linha abaixo no final do arquivo /etc/sysctl.conf (no archlinux criar o arquivo /etc/sysctl.d/40-max-user-watches.conf).
fs.inotify.max_user_watches=524288

# executar:
sudo sysctl -p
# no archlinux
sudo sysctl --system

—- Criar atalho (para instalação manual)
echo -e '[Desktop Entry]\n Version=1.0\n Name=vscode\n Exec=/home/wilton/devtools/VSCode-linux-x64/code\n Icon=/home/wilton/devtools/VSCode-linux-x64/resources/app/resources/linux/code.png\n Type=Application\n Categories=Application' | sudo tee /usr/share/applications/vscode.desktop

—- Colocar as linhas abaixo no arquivo .bashrc (para instalação manual)
export VSCODE_HOME=$HOME/devtools/vscode
export PATH=$PATH:$VSCODE_HOME

—- Plugin flutter
No menu View > Command Palette….
Digite install e selecione  Extensions: Install Extensions
Digite flutter e instale Flutter

***** Configurar temas openbox
sudo pacman -S arc-gtk-theme arc-icon-theme 
sudo pacman -S gtk-engine-murrine gnome-themes-standard
yay -S openbox-theme-arcbox openbox-arc-git

obconf -> Arc-Dark, Aparência fontes - tamanho 8
lxAppearence -> Widget - Arc-Dark, Fonte padrão - Sans Regular 9, Ícones - Arc, 
                Borda - Sample-slate

-- Gerando menu do openbox
xdg_menu --format openbox3 --root-menu /etc/xdg/menus/arch-applications.menu > xdg-menu.xml
-- Atualizar o arquivo .config/openbox/menu.xml

-- Configurar .config/openbox/rc.xml
  <keybind key="W-p">
    <action name="Execute">
      <command>code</command>
    </action>
  </keybind>

-- Configurar slock, google chrome e mousepad no arquivo .config/openbox/rc.xml
  <keybind key="W-l">
    <action name="Execute">
      <command>slock</command>
    </action>
  </keybind>
  <keybind key="W-w">
    <action name="Execute">
      <command>google-chrome-stable</command>
      <startupnotify>
        <enabled>yes</enabled>
        <name>Web Browser</name>
      </startupnotify>
    </action>
  </keybind>
    <keybind key="W-e">
      <action name="Execute">
        <command>medit</command>
        <startupnotify>
          <enabled>yes</enabled>
          <name>medit</name>
        </startupnotify>
      </action>
    </keybind>

-- Configurar scrot (captura de tela)
  <keybind key="Print">
    <action name="Execute">
      <command>sleep 5s && scrot</command>
    </action>
  </keybind>
  <keybind key="A-Print">
    <action name="Execute">
      <command>sleep 5s && scrot -ubcd 3</command>
    </action>
  </keybind>
  <keybind key="C-Print">
    <action name="Execute">
      <command>sleep 5s && scrot -scd 3</command>
    </action>
  </keybind>












***** Configurando a impressora
sudo pacman -S cups cups-pdf system-config-printer

-- inicializando no boot
sudo systemctl enable cups
sudo systemctl start cups

-- configurar permissões do administrador
sudo groupadd printadmin
sudo gpasswd -a wilton printadmin
sudo gpasswd -a wilton lp

-- alterar arquivo /etc/cups/cups-files.conf. Parâmetro SystemGroup
SystemGroup sys root printadmin

-- criar link simbolico para /var/spool/cups-pdf/wilton no home do usuário
ln -s /var/spool/cups-pdf/wilton pdf

-- para administrar impressoras
http://localhost:631

-- Instalar CUPS (Client)
sudo pacman -S libcups

-- para localizar drive para impressoras acessar:
http://www.openprinting.org/printers

-- Configurar impressora com system-config-printer
Trabalho: smb:\\usuario:senha@printserver\is0432
          ipp://is0432:631/ipp
          socket://is0432 ou socket://is0432:9100


***** Instalação VirtualBox

sudo pacman -S virtualbox virtualbox-host-modules-arch virtualbox-guest-iso

-- Obs: O arquivo .iso está localizado em /usr/lib/virtualbox/additions/VBoxGuestAdditions.iso
        e deve ser montado manualmente dentro da máquina virtual.

-- Configurar o virtualbox
sudo gpasswd -a $USER vboxusers

-- Configurar preferências
Preferências | Geral | Pasta Padrão para Máquinas | /home/wilton/VirtualBoxVMs
Preferências | Entrada | Máquina Virtual | Combinação de Teclas do Hospedeiro | Alt Gr

-- Carregar o módulo manualmente - Antes de iniciar o virtualbox
sudo modprobe vboxdrv

-- Para carregar o módulo no boot. Criar o arquivo /etc/modules-load.d/virtualbox.conf e
   inserir a linha abaixo:
vboxdrv


***** Instalação do Cub Linux no Virtualbox

-- Fazer Download
https://www.osboxes.org/cub-linux/ (Cub = Chromium + Ubuntu)
https://www.osboxes.org/cub-linux/

-- Descompactar o arquivo 1RC-64.7z no diretório VirtualBoxVMs

-- Criar a máquina virtual no virtualbox
Sistema | Placa mãe | Memória Base | 3072MB
Sistema | Placa mãe | Ordem de boot | marcar apenas disco rígido
Monitor | Memória de vídeo | 128MB

-- Alterar a senha do usuário osboxes
1) Precione a tecla SHIFT enquanto o máquina virtual inicia. Vai aparecer o menu do GRUB
2) Seleciona “Advanced options for CubLinux”
3) Selecione “Cub Linux, with Linux 4.2.0…-generic (Recorvery mode)”
4) No Recovery menu selecionar “Root    Drop to root shell prompt”
5) Executar mount -rw -o remount /
6) Alterar a senha do root passwd osboxes
7) exit e reboot

-- instalar virtualbox-guest-iso
Menu -> Dispositivos | Inserir Imagem do CD dos Adicionais para convidado…
Dentro do CubLinux o CD é montado em /media/osboxes/VBox_GAs_6.1.10

-- Ir para o diretório /media/osboxes/VBox_GAs_6.1.10 e executar:
VBoxLinuxAdditions.run

-- Atualizar o sistema (CubLinux)
sudo apt update
sudo apt dist-upgrade


=====================================================================================
----- Desenvolvimento
=====================================================================================


====> ----- Ferramentas

sudo pacman -S ghex hexedit meld sqlite sqlite-doc curl
yay -S postman-bin


====> ----- Configurar acesso a um device android pela USB

-- Configurar para usar o dispositivo. Executar o comando lsusb para descobrir o vender Id e product id do dispositivo.

lsusb

Bus 001 Device 007: ID 22b8:2e82 Motorola PCS motorola one

-- Criar o arquivo /etc/udev/rules.d/51-android.rules e inserir as linhas abaixo:

SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",MODE="0666",OWNER="wilton"
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",ATTR{idProduct}=="2e82",SYMLINK+="android_adb"
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",ATTR{idProduct}=="2e82",SYMLINK+="android_fastboot"
SUBSYSTEM=="usb",ATTR{idVendor}=="22b8",ATTR{idProduct}=="2e82",SYMLINK+="libmtp",MODE="0666",ENV{ID_MTP_DEVICE}="1"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",MODE="6860",OWNER="wilton"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",ATTR{idProduct}=="6860",SYMLINK+="android_adb"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",ATTR{idProduct}=="6860",SYMLINK+="android_fastboot"
SUBSYSTEM=="usb",ATTR{idVendor}=="04e8",ATTR{idProduct}=="6860",SYMLINK+="libmtp",MODE="0666",ENV{ID_MTP_DEVICE}="1"

-- Recarregar as regras udev

sudo udevadm control --reload-rules

-- Instalar Media Transfer Protocol

sudo pacman -S mtpfs gvfs-mtp

-- Descomentar a linha que tem "user_allow_other" no arquivo "/etc/fuse.conf"

